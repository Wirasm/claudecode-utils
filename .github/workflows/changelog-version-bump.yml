name: Update Changelog and Version

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

jobs:
  update-changelog-and-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code

      - name: Configure Claude API key
        run: |
          mkdir -p ~/.config/anthropic
          echo '{"api_key": "${{ secrets.ANTHROPIC_API_KEY }}"}' > ~/.config/anthropic/config.json

      - name: Update Changelog and Bump Version
        id: update
        run: |
          # Run Claude in headless mode to analyze repo and update changelog
          PROMPT="You are tasked with updating the changelog and bumping the version of this project.

          Please follow these steps:

          1. Analyze the git commit history to understand the changes thats being pushed to main:
             - Use git commands to view the recent commits
             - Determine if these changes are features, bug fixes, or breaking changes
             - Based on semantic versioning principles, decide whether to bump the major, minor, or patch version

          2. Check if CHANGELOG.md exists. If not, create it with proper headers following the Keep a Changelog format.

          3. Read the current version from pyproject.toml and determine the new version:
             - If you found breaking changes, bump the major version
             - If you found new features but no breaking changes, bump the minor version
             - If you found only bug fixes, documentation updates, or other minor changes, bump the patch version

          4. Update the version in:
             - pyproject.toml
             - then MIRROR the version in src/__init__.py 

          5. Add a new section to the changelog with:
             - The new version number and today's date
             - A summary of changes, categorized by type (Features, Bug Fixes, Documentation, etc.)

          # Run Claude with unrestricted Bash access and plain json output
          OUTPUT=$(claude -p "$PROMPT" \
            --allowedTools \
            "Read" \
            "Write" \
            "Bash" \
            --output-format json)

      - name: Commit changes
        if: steps.update.outputs.changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add CHANGELOG.md pyproject.toml src/__init__.py || true
          git commit -m "chore: Update changelog and bump version to ${{ steps.update.outputs.new_version }} [skip ci]"
          git push

          # Create a version tag if changes were made and new_version is not empty
          if [ -n "${{ steps.update.outputs.new_version }}" ]; then
            git tag v${{ steps.update.outputs.new_version }}
            git push origin v${{ steps.update.outputs.new_version }}
          fi
