name: Update Changelog and Version

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

jobs:
  update-changelog-and-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code

      - name: Configure Claude API key
        run: |
          mkdir -p ~/.config/anthropic
          echo '{"api_key": "${{ secrets.ANTHROPIC_API_KEY }}"}' > ~/.config/anthropic/config.json

      - name: Update Changelog
        id: update
        run: |
          # Simple prompt for Claude to update changelog only, not commit
          PROMPT="You are tasked with updating the changelog and version of this project.

          Follow these steps:
          1. Examine the repository structure using git commands
          2. Check if CHANGELOG.md exists and create it if not
          3. Find the current version in pyproject.toml
          4. Analyze recent git commits to determine if you should bump major, minor, or patch version following semantic versioning
          5. Update the version in pyproject.toml and src/__init__.py if it exists
          6. Add a new section to the changelog with today's date and categorized changes

          Follow semantic versioning principles:
          - Major: breaking changes
          - Minor: new features without breaking changes
          - Patch: bug fixes and minor improvements

          After making the changes, print the new version number on a line by itself."

          # Run Claude with basic tools
          OUTPUT=$(claude -p "$PROMPT" --allowedTools "Read" "Write" "Bash")
          
          # Extract the version number from the output (assuming it's on a line by itself)
          NEW_VERSION=$(echo "$OUTPUT" | grep -o '^[0-9]\+\.[0-9]\+\.[0-9]\+$' | tail -1)

          # Only set output if we got a version
          if [ -n "$NEW_VERSION" ]; then
            echo "New version: $NEW_VERSION"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        run: |
          # Check if any changes were made
          if ! git diff --quiet; then
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            
            # Get version from output or from file if not provided
            NEW_VERSION="${{ steps.update.outputs.new_version }}"
            if [ -z "$NEW_VERSION" ]; then
              NEW_VERSION=$(grep -o 'version = "[^"]*"' pyproject.toml | head -1 | cut -d'"' -f2)
            fi
            
            # Commit the changes
            git add CHANGELOG.md pyproject.toml src/__init__.py || true
            git commit -m "chore: Update changelog and bump version to $NEW_VERSION [skip ci]"
            git push
            
            # Create a version tag if we have a version
            if [ -n "$NEW_VERSION" ]; then
              git tag v$NEW_VERSION
              git push origin v$NEW_VERSION
            fi
          else
            echo "No changes were made"
          fi