name: Update Changelog and Version

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

jobs:
  update-changelog-and-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      CLAUDE_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code
          # Verify installation
          which claude
          claude --version
          echo "Claude Code installed successfully"

      - name: Configure Claude API key (multiple methods)
        run: |
          # Method 1: Config file
          mkdir -p ~/.config/anthropic
          echo '{"api_key": "${{ secrets.ANTHROPIC_API_KEY }}"}' > ~/.config/anthropic/config.json
          
          # Method 2: Direct environment variable (already set at job level)
          echo "API key env var is set: $([ -n \"$ANTHROPIC_API_KEY\" ] && echo 'Yes' || echo 'No')"
          echo "CLAUDE_API_KEY env var is set: $([ -n \"$CLAUDE_API_KEY\" ] && echo 'Yes' || echo 'No')"
          
          # Method 3: Store in credentials file as well
          mkdir -p ~/.anthropic
          echo "${{ secrets.ANTHROPIC_API_KEY }}" > ~/.anthropic/api_key
          
          echo "Multiple configuration methods completed"

      - name: Test Claude CLI
        run: |
          # Test with API key directly in command
          echo "Testing Claude CLI..."
          ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" CLAUDE_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" claude -p "Say hello" || echo "Claude test failed with exit code $?"

      - name: Debug information
        run: |
          echo "Environment information:"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Python version: $(python --version)"
          echo "System info: $(uname -a)"
          echo "Working directory: $(pwd)"
          
          # Check if config exists
          echo "API Key config file exists: $(test -f ~/.config/anthropic/config.json && echo 'Yes' || echo 'No')"
          echo "API Key credentials file exists: $(test -f ~/.anthropic/api_key && echo 'Yes' || echo 'No')"
          
          # Check env vars (safely without revealing)
          echo "ANTHROPIC_API_KEY env var is set: $([ -n \"$ANTHROPIC_API_KEY\" ] && echo 'Yes' || echo 'No')"
          echo "CLAUDE_API_KEY env var is set: $([ -n \"$CLAUDE_API_KEY\" ] && echo 'Yes' || echo 'No')"
          
          # List config directories
          echo "Contents of ~/.config/anthropic:"
          ls -la ~/.config/anthropic || echo "Directory not found"
          
          echo "Contents of ~/.anthropic:"
          ls -la ~/.anthropic || echo "Directory not found"

      - name: Update Changelog
        run: |
          # Try using the API key explicitly in an environment variable
          # Note: Using both env var keys since claude-code might check for either
          ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" CLAUDE_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" \
          claude -p "Update the changelog based on recent git commits and increment the version in pyproject.toml. When done, print the new version number." \
            --allowedTools "Read" "Write" "Bash"
          
          # Check claude exit code
          CLAUDE_EXIT=$?
          echo "Claude exit code: $CLAUDE_EXIT"
          
          if [ $CLAUDE_EXIT -ne 0 ]; then
            echo "Claude failed to update changelog"
            exit 1
          fi

      - name: Commit Changes
        run: |
          # Check if any changes were made
          if ! git diff --quiet; then
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            
            # Extract new version from pyproject.toml
            NEW_VERSION=$(grep -o 'version = "[^"]*"' pyproject.toml | head -1 | cut -d'"' -f2)
            echo "New version from pyproject.toml: $NEW_VERSION"
            
            # Commit the changes
            git add CHANGELOG.md pyproject.toml src/__init__.py || true
            git commit -m "chore: Update changelog and bump version to $NEW_VERSION [skip ci]"
            git push
            
            # Create a version tag
            if [ -n "$NEW_VERSION" ]; then
              git tag v$NEW_VERSION
              git push origin v$NEW_VERSION
            fi
          else
            echo "No changes were made"
          fi