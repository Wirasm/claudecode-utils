#!/usr/bin/env python3
"""CLI interface for the Claude Code development runner using Typer."""

import typer
from rich.console import Console

from ..shared.ui_theme import (
    create_box_header,
    create_header,
    format_boolean_option,
)
from .dylan_dev_runner import generate_dev_prompt, run_claude_dev

console = Console()


def dev(
    review_file: str = typer.Argument(
        ...,
        help="Path to the review file to use as input (review file must be provided with relative path)",
        metavar="REVIEW_FILE",
    ),
    branch: str | None = typer.Option(
        None,
        "--branch",
        "-b",
        help="Branch to apply fixes to (defaults to current branch)",
        show_default=True,
    ),
    output: str | None = typer.Option(
        None,
        "--output",
        "-o",
        help="Custom output file path for dev report (defaults to tmp/dylan-dev-report-<branch>.md)",
        show_default=True,
    ),
    issue: str | None = typer.Option(
        None,
        "--issue",
        "-i",
        help="Specify issue numbers from the review file to fix (default: all issues) (comma-separated issue numbers 001, 002, ...)",
        show_default=True,
    ),
    severity: str = typer.Option(
        "critical,high",
        "--severity",
        "-s",
        help="Only fix issues with specified severity (default: high and critical) (comma-separated: critical, high, medium, low)",
        show_default=True,
    ),
    interactive: bool = typer.Option(
        False,
        "--interactive",
        help="Run in interactive mode",
        show_default=True,
    ),
    dry_run: bool = typer.Option(
        False,
        "--dry-run",
        help="Preview changes without applying any fixes",
        show_default=True,
    ),
    debug: bool = typer.Option(
        False,
        "--debug",
        "-d",
        help="Print debug information (including the full prompt)",
        show_default=True,
    ),
):
    """Implement fixes from code reviews using Claude Code.

    Takes a review file generated by 'dylan review' and implements fixes
    for issues based on priority. Generates a development report detailing
    changes made.

    Examples:
        # Implement fixes from a review file
        dylan dev tmp/dylan-review-compare-feature-branch-to-develop.md

        # Implement fixes on a specific branch
        dylan dev tmp/dylan-review-compare-feature-branch-to-develop.md --branch feature-branch

        # Only fix critical issues
        dylan dev tmp/dylan-review-compare-feature-branch-to-develop.md --severity "critical"

        # Only fix issues in specific tasks
        dylan dev tmp/dylan-review-compare-feature-branch-to-develop.md --issue "001, 002"

        # Run in interactive mode
        dylan dev tmp/dylan-review-compare-feature-branch-to-develop.md --interactive

        # Preview changes without applying any fixes
        dylan dev tmp/dylan-review-compare-feature-branch-to-develop.md --dry-run
    """
    # Default values
    allowed_tools = ["Read", "Glob", "Grep", "LS", "Bash", "Edit", "MultiEdit", "Write", "TodoRead", "TodoWrite"]
    output_format = "text"

    # Show header with flair
    console.print()
    console.print(create_header("Dylan", "Development"))
    console.print()

    # Show development configuration
    config_details = {
        "Review File": review_file,
        "Branch": branch or "current branch",
        "Output": output or "default path",
        "Issues": issue or "all issues",
        "Severity": severity,
        "Interactive Mode": format_boolean_option(interactive, "✓ Enabled", "✗ Disabled"),
        "Dry Run": format_boolean_option(dry_run, "✓ Enabled", "✗ Disabled"),
        "Debug": format_boolean_option(debug, "✓ Enabled", "✗ Disabled"),
        "Exit": "Ctrl+C to interrupt"
    }
    console.print(create_box_header("Development Configuration", config_details))
    console.print()

    # Generate prompt
    prompt = generate_dev_prompt(
        review_file=review_file,
        branch=branch,
        output_file=output,
        issue_numbers=issue.split(",") if issue is not None else None,
        severity_levels=severity.split(",") if severity else ["critical", "high"],
        dry_run=dry_run,
    )

    # Run development
    run_claude_dev(
        prompt,
        allowed_tools=allowed_tools,
        branch=branch,
        output_format=output_format,
        debug=debug,
        interactive=interactive
    )


# For backwards compatibility and standalone usage
def main():
    """Entry point for standalone CLI usage."""
    typer.run(dev)


if __name__ == "__main__":
    main()
